'' Residential Controller

'' Column Class
DEFINE Column USING _id, _status, _numOfFloors, _numOfElevators
    SET id TO _id
    SET status TO _status
    SET numOfFloors TO _numOfFloors
    SET numOfElevators TO _numOfElevators
    SET elevatorList TO EMPTY Array
    SET callButtonsList TO EMPTY Array
    
    '' Sequence that fills the elevatorList with Elevators objects
    SEQUENCE fillElevatorList
        SET elevatorId TO 1
        FOR numOfElevators
            ADD NEW Elevator WITH elevatorId, currentFloor TO elevatorList
            INCREMENT elevatorId by 1
        ENDFOR
    ENDSEQUENCE

    CALL fillElevatorList

    '' Sequence that fills the callButtonsList with CallButton objects
    SEQUENCE fillcallButtonsList
        SET floor TO 1

        FOR numOfFloors
            IF floor IS LESS THAN numOfFloors THEN
                SET callButtonsList TO ADD NEW CallButton WITH floor, "up"
            ELSE IF numOfFloors IS GREATER THAN fooor
                SET callButtonsList TO ADD NEW CallButton WITH floor, "down"
            ENDIF

            INCREMENT floor by 1
        ENDFOR
    ENDSEQUENCE

    CALL fillcallButtonsList

    SEQUENCE requestElevator USING currentFloor, direction
        '' Find the best elevator to use
        SET chosenElevator TO CALL findBestElevator WITH currentFloor AND direction
        '' ADD currentFloor to the floorRequestList
        ADD currentFloor TO Elevator floorRequestList
        '' Time to move the elevator
        CALL chosenElevator move
        
        RETURN chosenElevator
    ENDSEQUENCE
ENDDEFINE

'' Elevator Class
DEFINE Elevator USING _id, _currentFloor
    SET ID TO _id
    SET status TO idle
    SET currentFloor TO _currentFloor
    SET direction TO up
    SET floorRequestList TO Empty Array

    '' Moving the elevator to the requested floor(s)
    SEQUENCE move
        '' Go through the list of floor requests until it's empty
        WHILE floorRequestList IS NOT EMPTY
            
            FOR EACH floor IN floorRequestList
                IF currentFloor IS LESS THAN first element IN floorRequestList THEN
                    SET direction TO up
                    IF Doors opened IS true THEN
                        CALL Doors closeDoors
                    ENDIF
                    SET status TO moving

                    '' Go up floors until it gets there
                    WHILE currentFloor IS LESS THAN first element IN floorRequestList
                        INCREMENT currentFloor by 1
                    ENDWHILE

                    CALL Doors openDoors
                    SET status TO stopped
                    CALL Doors closeDoors
                ELSE IF currentFloor IS GREATER THAN first element IN floorRequestList THEN
                    SET direction TO down
                    IF Doors opened IS true
                        CALL Doors closeDoors
                    ENDIF
                    SET status TO moving

                    '' Go down floors until it gets there
                    WHILE currentFloor IS GREATER THAN first element IN floorRequestList
                        DECREMENT currentFloor by 1
                    ENDWHILE

                    CALL Doors openDoors
                    SET status TO stopped
                    CALL Doors closeDoors
                ENDIF

                REMOVE first element IN floorRequestList
            ENDFOR
        ENDWHILE

        SET status TO idle
    ENDSEQUENCE

    '' Would be once the user presses a floor button inside the elevator
    SEQUENCE requestFloor USING floor
        ADD floor TO floorRequestList
        CALL elevator move
    ENDSEQUENCE
ENDDEFINE

'' Call Button Class (up/down buttons outside elevator)
DEFINE CallButton USING callButtonValue, direction
    SET callButtonValue TO callButtonValue
    SET direction TO direction

    SEQUENCE buttonPressed USING callButtonValue, direction
       SET bestElev CALL column requestElevator WITH callButtonValue, direction
       RETURN bestElev
    ENDSEQUENCE
ENDDEFINE

'' Floor Request Button Class (floor buttons inside the elevator)
DEFINE FloorRequestButton USING requestedFloor
    SET requestedFloor TO requestedFloor

    SEQUENCE buttonPressed USING requestedFloor
        CALL requestFloor WITH requestedFloor
    ENDSEQUENCE
ENDDEFINE

'' Doors Class
DEFINE Doors
    SET opened TO false

    SEQUENCE openDoors
        SET opened TO true
        PRINT Doors opened
    ENDSEQUENCE

    SEQUENCE closeDoors
        SET opened TO false
        PRINT Doors closed
    ENDSEQUENCE
ENDDEFINE

'' Determine which elevator would be the best to use
SEQUENCE findBestElevator USING requestedFloor, requestedDirection
    SET bestElevator TO 0
    SET bestScore TO 100
    SET floorDistanceList TO EMPTY list
    SET difference TO 0

    '' Find difference between each elevator's floor and the requested floor, to get the closest elevator
    FOR EACH elevator IN column elevatorList
        SET difference TO absolute value OF requestedFloor MINUS elevator currentFloor
        ADD difference TO floorDistanceList
    ENDFOR

    SORT floorDistanceList FROM lowest difference TO highest difference

    FOR EACH elevator IN column elevatorList
        '' Elevator is currently at the floor requested, it's stopped, and going in the direction requested
        IF requestedFloor IS EQUAL TO elevator currentFloor AND elevator status IS stopped AND elevator direction IS EQUAL TO requestedDirection THEN
            SET bestScore TO 1
        '' Elevator is currently higher than the floor requested and it's already moving in the direction the user is at
        ELSE IF elevator currentFloor IS GREATER THAN requestedFloor AND elevator status IS moving AND elevator direction IS EQUAL TO requestedDirection THEN
            SET bestScore TO 2
        '' Elevator is currently lower than the floor requested and it's already moving in the direction the user is at
        ELSE IF elevator currentFloor IS LESS THAN requestedFloor AND elevator status IS moving AND elevator direction IS EQUAL TO requestedDirection THEN
            SET bestScore TO 2
        '' Elevator is currently higher than the floor requested, it's idle, and the distance from requested floor to this elevator's floor is less than the rest
        ELSE IF elevator currentFloor IS GREATER THAN requestedFloor AND elevator status IS idle AND this elevator IN floorDistanceList IS LESS THAN OTHERS THEN
            SET bestScore TO 3
        '' Elevator is currently lower than the floor requested, it's idle, and the distance from requested floor to this elevator's floor is less than the rest
        ELSE IF elevator currentFloor IS LESS THAN requestedFloor AND elevator status IS idle AND this elevator IN floorDistanceList IS LESS THAN OTHERS THEN
            SET bestScore TO 3
        '' Elevator is currently higher than the floor requested and it's NOT moving in the direction the user is at
        ELSE IF elevator currentFloor IS GREATER THAN requestedFloor AND elevator status IS moving AND elevator direction IS NOT EQUAL TO requestedDirection THEN
            SET bestScore TO 4
        '' Elevator is currently lower than the floor requested and it's NOT moving in the direction the user is at
        ELSE IF elevator currentFloor IS LESS THAN requestedFloor AND elevator status IS moving AND elevator direction IS NOT EQUAL TO requestedDirection THEN
            SET bestScore TO 4
        '' Elevator is idle
        ELSE IF elevator status IS idle
            SET bestScore TO 5
        ENDIF
    ENDFOR

    SORT elevatorList FROM lowest bestScore TO highest bestScore
    SET bestElevator TO elevator that has lowest bestScore
    RETURN bestElevator
ENDSEQUENCE


'' --- Scenario 1 --- ''
'' Setup columns
SET c1 TO NEW Column WITH 1 AND online AND 10 AND 2
SET c1 first elevator currentFloor TO 2
SET c1 second elevator currentFloor TO 6

'' A passenger calls elevator from floor 3
SET elevator TO CALL c1 CallButton buttonPressed WITH 3 AND up
'' Passenger would get on, then request to go to floor 7
CALL elevator FloorRequestButton buttonPressed WITH 7
'' ElevatorA now on 7th floor
'' --- /End Scenario --- ''

'' --- Scenario 2 --- ''
SET c1 TO NEW Column WITH 1 AND online AND 10 AND 2
SET c1 first elevator currentFloor TO 10
SET c1 second elevator currentFloor TO 3

'' A passenger calls elevator
SET elev TO CALL c1 CallButton buttonPressed WITH 1 AND up
'' Passenger would get on, then request to go to floor 6
CALL elev requestFloor buttonPressed WITH 6
'' ElevatorA now on 6th floor
'' Couple of minutes pass...
'' A passenger calls elevator
SET elv TO CALL c1 CallButton buttonPressed WITH 3 AND down
'' Passenger would get on, then request to go to floor 5
CALL elev requestFloor buttonPressed WITH 5
'' ElevatorA now on 5th floor
'' Lastly, another passenger calls elevator
SET elev TO CALL c1 CallButton buttonPressed WITH 9 AND down
'' Passenger would get on, then request to go to floor 2
CALL elev requestFloor buttonPressed WITH 2
'' ElevatorB now on 2nd floor
'' --- /End Scenario --- ''


'' --- Scenario 3 --- ''
SET c1 TO NEW Column WITH 1 AND online AND 10 AND 2
SET c1 first elevator currentFloor TO 10
SET c1 second elevator currentFloor TO 3
SET c1 second elevator status TO moving
SET c1 second elevator direction TO up

'' A passenger calls elevator
SET elev TO CALL c1 CallButton buttonPressed WITH 3 AND down
'' Passenger would get on, then request to go to floor 2
CALL elev requestFloor buttonPressed WITH 2
'' ElevatorA now on 2nd floor
'' Few minutes later...
'' A passenger calls elevator
SET elev TO CALL c1 CallButton buttonPressed WITH 10 AND down
'' Passenger would get on, then request to go to floor 2
CALL elev requestFloor buttonPressed WITH 3
'' ElevatorB now on 3rd floor
'' --- /End Scenario --- ''